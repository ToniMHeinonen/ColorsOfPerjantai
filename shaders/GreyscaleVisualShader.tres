[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeDotProduct" id=2]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.299, 0.587, 0.114 ) ]

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 2

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture( TEXTURE , n_out2p0.xy );
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// DotProduct:4
	vec3 n_in4p1 = vec3(0.29900,0.58700,0.11400);
	float n_out4p0;
	n_out4p0 = dot( n_out5p0 , n_in4p1 );

// Output:0
	COLOR.rgb = vec3(n_out4p0);
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -539.5, -116 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 720, 200 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -640, 80 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( 300, -100 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( -200, 40 )
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 0, 2, 0, 5, 0, 5, 0, 4, 0, 5, 1, 0, 1 )
